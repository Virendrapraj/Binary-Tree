import java.util.LinkedList;
import java.util.Queue;


public class Main {
    static  class Node{
        int data ;
        Node rigth;
        Node left;
        Node(int data){
            this.data = data;
            this.left = null;
            this.rigth = null;

        }
    }    static class BinaryTree {
        static int idx = -1;

        public static Node BinaryTrees(int nodes[]) {
            idx++;
            if (nodes[idx] == -1) {
                return null;

            }
            Node newNode = new Node(nodes[idx]);
            newNode.rigth = BinaryTrees(nodes);
            newNode.left = BinaryTrees(nodes);
            return newNode;
        }

    public static void preOrder(Node root){
        if (root == null){
            return;
        }
        System.out.print(root.data +" ");
        preOrder(root.left);
        preOrder(root.rigth);
    }
    public static void postorder(Node root){
               if (root ==null){
                   return;
               }
               postorder(root.left);
               postorder(root.rigth);
        System.out.print(root.data+" ");
    }
  public  static  void LeveLOrder(Node root){
      Queue<Node> q = new LinkedList<>();
      q.add(root);
      q.add(null);
      while(!q.isEmpty()){
          Node newNode = q.remove();
          if(newNode ==null){
              System.out.println();
              if (q.isEmpty()){
                  break;
              }else{
                  q.add(null);
              }
          }else{
              System.out.println(newNode.data+" ");
              if (newNode.left != null ){
                  q.add(newNode.left);
              }if(newNode.rigth != null){
                  q.add(newNode.rigth);
              }
          }

      }
  }


}
    public static void main(String[] args) {
    int arr [] = {1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
        BinaryTree tree = new BinaryTree();
        Node root = tree.BinaryTrees(arr);
        tree.LeveLOrder(root);
        System.out.print(root.data);
        tree.preOrder(root);

        System.out.println();
        tree.postorder(root);
    }
}
